cmake_minimum_required(VERSION 3.12)

# 使用 vcpkg 工具链文件 Warning  工具连设置必须是在project 前面
set(CMAKE_TOOLCHAIN_FILE $ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake CACHE STRING "Vcpkg toolchain file")
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

project(memory_test)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
if(MSVC)
set(CMAKE_GENERATOR_PLATFORM x64)
endif()

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_BUILD_TYPE Debug)

# OpenMP
find_package(OpenMP)
message("OpenMP_FOUND = ${OpenMP_FOUND}")

if(OpenMP_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

# OpenCV
find_package(OpenCV CONFIG REQUIRED)
message("OpenCV_FOUND = ${OpenCV_FOUND}")
message("OpenCV_VERSION = ${OpenCV_VERSION}")
message("OpenCV_LIBS = ${OpenCV_LIBS}")

set(TARGET_PLATFORM)


# 外部依赖项
set(DPS_INCLUDES)
set(DPS_TARGETS)
set(DPS_LIBRARYS)

# 资源文件

# #图标
set(RC_FILE)

# #qrc 文件
set(QRC_SOURCE_FILES)

# 忽略特定库
if(MSVC)
SET(CMAKE_EXE_LINKER_FLAGS /NODEFAULTLIB:"libcmt.lib;libc.lib")
endif()

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
include(CommonTools)

add_subdirectory(memory_one)
add_subdirectory(memory_alloc_area)
add_subdirectory(memory_array)
add_subdirectory(memory_array_2D)
add_subdirectory(memory_void_cast)
add_subdirectory(memory_const_point)
add_subdirectory(memory_array_opencv)
add_subdirectory(memory_unique_ptr)
add_subdirectory(memory_share_ptr)
add_subdirectory(memory_weak_ptr)
add_subdirectory(memory_function_arg_ptr)
add_subdirectory(memory_string)
add_subdirectory(memory_vector)
add_subdirectory(memory_new_delete)
add_subdirectory(memory_allocate)
add_subdirectory(memory_uninitialized_copy)
add_subdirectory(memory_limit_construction)
add_subdirectory(memory_virtual_class)
add_subdirectory(memory_virtual_function)



# 拷贝assert目录到输出目录
set(ASSERT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/assert)
file(COPY ${ASSERT_PATH} DESTINATION ${OUT_RUN_PATH})
